This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
package.json
src/example..js
src/index.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="package.json">
{
  "name": "be",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "module",
  "dependencies": {
    "axios": "^1.8.4",
    "cors": "^2.8.5",
    "express": "^5.1.0"
  }
}
</file>

<file path="src/example..js">
const postCounts = {
    '1': { name: '1', postCount: 12 },
    '2': { name: '2', postCount: 8 },
    '3': { name: '3', postCount: 11 },
    '4': { name: '4', postCount: 10 },
    '5': { name: '5', postCount: 16 },
    '6': { name: '6', postCount: 7 },
    '7': { name: '7', postCount: 14 },
    '8': { name: '8', postCount: 17 },
    '9': { name: '9', postCount: 4 },
    '10': { name: '10', postCount: 9 },
    '11': { name: '11', postCount: 7 },
    '12': { name: '12', postCount: 16 },
    '13': { name: '13', postCount: 8 },
    '14': { name: '14', postCount: 13 },
    '15': { name: '15', postCount: 8 },
    '16': { name: '16', postCount: 10 },
    '17': { name: '17', postCount: 12 },
    '18': { name: '18', postCount: 9 },
    '19': { name: '19', postCount: 16 },
    '20': { name: '20', postCount: 17 }
};

const topUsers = Object.values(postCounts)
    .sort((a, b) => b.postCount - a.postCount)
    .slice(0, 5);

console.log(topUsers);
</file>

<file path="src/index.js">
import express from 'express'
import cors from 'cors'
import axios from 'axios'

const app = express()

app.use(cors())

app.get('/users', async (req, res)=> {
    try {
        const response = await axios.get('http://20.244.56.144/evaluation-service/users', {
            headers: {
                'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiZXhwIjoxNzQzNjA0MDk1LCJpYXQiOjE3NDM2MDM3OTUsImlzcyI6IkFmZm9yZG1lZCIsImp0aSI6ImExNGY3NDJmLTVhMGYtNGM2Yy04NTBmLWNlNWFkMjJkOWQ1YiIsInN1YiI6IjIyMjkwMjdAa2lpdC5hYy5pbiJ9LCJlbWFpbCI6IjIyMjkwMjdAa2lpdC5hYy5pbiIsIm5hbWUiOiJiLiBsYXdyZW5jZSBzaGFybWEiLCJyb2xsTm8iOiIyMjI5MDI3IiwiYWNjZXNzQ29kZSI6Im53cHdyWiIsImNsaWVudElEIjoiYTE0Zjc0MmYtNWEwZi00YzZjLTg1MGYtY2U1YWQyMmQ5ZDViIiwiY2xpZW50U2VjcmV0IjoicFl2Q2hBTUpBdEttZUtwayJ9.-8Bkk_vE0u1bXlNJTbYLShwG2sXiUbP799ZiNYyUdRs`
            }
        })
        const value = response.data['users'];
        const postCounts = {};

        for (const userId of Object.keys(value)) {
            try {
                const postResponse = await axios.get(`http://20.244.56.144/evaluation-service/users/${userId}/posts`, {
                    headers: { 'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiZXhwIjoxNzQzNjA0MDk1LCJpYXQiOjE3NDM2MDM3OTUsImlzcyI6IkFmZm9yZG1lZCIsImp0aSI6ImExNGY3NDJmLTVhMGYtNGM2Yy04NTBmLWNlNWFkMjJkOWQ1YiIsInN1YiI6IjIyMjkwMjdAa2lpdC5hYy5pbiJ9LCJlbWFpbCI6IjIyMjkwMjdAa2lpdC5hYy5pbiIsIm5hbWUiOiJiLiBsYXdyZW5jZSBzaGFybWEiLCJyb2xsTm8iOiIyMjI5MDI3IiwiYWNjZXNzQ29kZSI6Im53cHdyWiIsImNsaWVudElEIjoiYTE0Zjc0MmYtNWEwZi00YzZjLTg1MGYtY2U1YWQyMmQ5ZDViIiwiY2xpZW50U2VjcmV0IjoicFl2Q2hBTUpBdEttZUtwayJ9.-8Bkk_vE0u1bXlNJTbYLShwG2sXiUbP799ZiNYyUdRs` }
                });

                postCounts[userId] = {
                    name: value[userId],
                    postCount: postResponse.data.posts.length
                };


            } catch (error) {
                console.error(`Error fetching posts for user ${userId}:`, error);
                postCounts[userId] = {
                    name: value[userId],
                    postCount: 1
                };
            }
        }

        const topUsers = Object.values(postCounts)
            .sort((a, b) => b.postCount - a.postCount)
            .slice(0, 5);
        res.json(topUsers)
    }catch(e){
        console.error('Error fetching data:', e)
    }
})

app.get('/posts', async (req, res)=>{
    const response = await axios.get('http://20.244.56.144/evaluation-service/users', {
        headers: {
            'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiZXhwIjoxNzQzNjA0MDk1LCJpYXQiOjE3NDM2MDM3OTUsImlzcyI6IkFmZm9yZG1lZCIsImp0aSI6ImExNGY3NDJmLTVhMGYtNGM2Yy04NTBmLWNlNWFkMjJkOWQ1YiIsInN1YiI6IjIyMjkwMjdAa2lpdC5hYy5pbiJ9LCJlbWFpbCI6IjIyMjkwMjdAa2lpdC5hYy5pbiIsIm5hbWUiOiJiLiBsYXdyZW5jZSBzaGFybWEiLCJyb2xsTm8iOiIyMjI5MDI3IiwiYWNjZXNzQ29kZSI6Im53cHdyWiIsImNsaWVudElEIjoiYTE0Zjc0MmYtNWEwZi00YzZjLTg1MGYtY2U1YWQyMmQ5ZDViIiwiY2xpZW50U2VjcmV0IjoicFl2Q2hBTUpBdEttZUtwayJ9.-8Bkk_vE0u1bXlNJTbYLShwG2sXiUbP799ZiNYyUdRs`
        }
    })
    const value = response.data['users']
    const lst = []
    for (const userId of Object.keys(value)) {
        const postResponse = await axios.get(`http://20.244.56.144/evaluation-service/users/${userId}/posts`, {
            headers: {'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiZXhwIjoxNzQzNjA0MDk1LCJpYXQiOjE3NDM2MDM3OTUsImlzcyI6IkFmZm9yZG1lZCIsImp0aSI6ImExNGY3NDJmLTVhMGYtNGM2Yy04NTBmLWNlNWFkMjJkOWQ1YiIsInN1YiI6IjIyMjkwMjdAa2lpdC5hYy5pbiJ9LCJlbWFpbCI6IjIyMjkwMjdAa2lpdC5hYy5pbiIsIm5hbWUiOiJiLiBsYXdyZW5jZSBzaGFybWEiLCJyb2xsTm8iOiIyMjI5MDI3IiwiYWNjZXNzQ29kZSI6Im53cHdyWiIsImNsaWVudElEIjoiYTE0Zjc0MmYtNWEwZi00YzZjLTg1MGYtY2U1YWQyMmQ5ZDViIiwiY2xpZW50U2VjcmV0IjoicFl2Q2hBTUpBdEttZUtwayJ9.-8Bkk_vE0u1bXlNJTbYLShwG2sXiUbP799ZiNYyUdRs`}
        });

        lst.add(postResponse.data.posts.id)
    }



    const { type } = req.query
    if (type === 'popular'){
        try {
            const postIds = Array.from({ length: 200 }, (_, i) => i + 100);

            const commentRequests = postIds.map(async (postId) => {
                try {
                    const commentResponse = await axios.get(
                        `http://20.244.56.144/evaluation-service/posts/${postId}/comments`,
                        {
                            headers: {
                                'Authorization': `Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJNYXBDbGFpbXMiOnsiZXhwIjoxNzQzNjA2ODEwLCJpYXQiOjE3NDM2MDY1MTAsImlzcyI6IkFmZm9yZG1lZCIsImp0aSI6ImExNGY3NDJmLTVhMGYtNGM2Yy04NTBmLWNlNWFkMjJkOWQ1YiIsInN1YiI6IjIyMjkwMjdAa2lpdC5hYy5pbiJ9LCJlbWFpbCI6IjIyMjkwMjdAa2lpdC5hYy5pbiIsIm5hbWUiOiJiLiBsYXdyZW5jZSBzaGFybWEiLCJyb2xsTm8iOiIyMjI5MDI3IiwiYWNjZXNzQ29kZSI6Im53cHdyWiIsImNsaWVudElEIjoiYTE0Zjc0MmYtNWEwZi00YzZjLTg1MGYtY2U1YWQyMmQ5ZDViIiwiY2xpZW50U2VjcmV0IjoicFl2Q2hBTUpBdEttZUtwayJ9.3LmTBdHrj8XGi8YpCrO3ymZMj5hqroV8u4hUauanP6A`
                            }
                        }
                    );

                    const commentCount = Array.isArray(commentResponse.data?.comments)
                        ? commentResponse.data.comments.length
                        : 0;

                    return { name: postId, commentCount };
                } catch (error) {
                    console.error(`Error fetching comments for post ${postId}:`, error);
                    return { name: postId, commentCount: 1 };
                }
            });

            const commentCounts = await Promise.all(commentRequests);

            // Get top 5 posts based on comment count
            const topPosts = commentCounts
                .sort((a, b) => b.commentCount - a.commentCount)
                .slice(0, 5);

            res.json(topPosts);
        }catch(e){
            console.error('Error fetching data:', e)
        }
    }
})

app.listen(3001,()=>{
    console.log('listening at 3001')
})
</file>

</files>
